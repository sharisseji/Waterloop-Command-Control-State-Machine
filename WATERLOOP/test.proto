syntax = "proto3";

package test; //name is "test"

// Define possible board types
enum BoardType {
    BMS = 0;   // Battery Management System
    ST = 1;    // Sensors & Telemetry
    MC = 2;    // Motor Controller
}

// DATA Types
// BMS Data Types
enum BMSDataType {
    TEMPERATURE_ADC = 0;   // Temperature of ADC
    AVG_TEMP_MUX = 1;      // Average temperature of MUX
    TEMPERATURE_THERMISTOR = 2; // Temperature of thermistor
    AVG_THERMISTOR_TEMP_MUX = 3; // Average thermistor temperature of each MUX
    MUX1_TEMP = 4;         // MUX1 Temperature
    MUX2_TEMP = 5;         // MUX2 Temperature
    MUX3_TEMP = 6;         // MUX3 Temperature
    MUX4_TEMP = 7;         // MUX4 Temperature
    MUX5_TEMP = 8;         // MUX5 Temperature
    MUX6_TEMP = 9;         // MUX6 Temperature
}

// S&T Data Types
enum STDataType {
    PRESSURE = 0;   // Pressure
    LIM_ONE_TEMP_ONE = 1; // Temperature
    LIM_ONE_TEMP_TWO = 2; // Temperature
    LIM_ONE_TEMP_THREE = 3; // Temperature
    LIM_TWO_TEMP_ONE = 4; // Temperature
    LIM_TWO_TEMP_TWO = 5; // Temperature
    LIM_TWO_TEMP_THREE = 6; // Temperature
    X_ACCEL = 7; // Acceleration in x axis
    Y_ACCEL = 8; // Acceleration in y axis
    X_GYRO = 9; // Angular velocity in x axis
    Y_GYRO = 10; // Angular velocity in y axis
    Z_GYRO = 11;  // Angular velocity in z axis
}

// MC Data Types (from config.h)
enum MCDataType {
    BATTERY_VOLTAGE = 0; // Battery voltage
    BATTERY_CURRENT = 1; // Battery current
    SPEED = 2;           // Motor Speed (RPM)
    MOTOR_TEMP = 3;      // Motor Temperature
    DRIVING_DIRECTION = 4; // Driving direction
    VOLTAGE = 5;     // Motor Voltage
    CURRENT = 6;     // Motor Current
    CTRL_TEMP = 7;   // Controller Temperature
}

message TestRequest{
    BoardType board_type = 1;
    oneof data_type {
        BMSDataType bms_data_type = 2;
        STDataType st_data_type = 3;
        MCDataType mc_data_type = 4; // focus on this one
    }
    string sensor_id = 5; // Unique sensor ID, if applicable
    bytes data = 6;       // Raw data (the actual measurement)
}

service TestService {
    rpc SendTestMessage(TestRequest) returns (TestResponse);
}

//message TestRequest {
//    string message = 1;
//}

message TestResponse {
    string message = 1;               // General message
    double battery_voltage = 2;       // Example for BATTERY_VOLTAGE
    double battery_current = 3;       // Example for BATTERY_CURRENT
    int32 speed = 4;                  // Example for SPEED (RPM)
    double motor_temp = 5;            // Example for MOTOR_TEMP
    string driving_direction = 6;     // Example for DRIVING_DIRECTION
    double voltage = 7;               // Example for MOTOR_VOLTAGE
    double current = 8;               // Example for MOTOR_CURRENT
    double ctrl_temp = 9;             // Example for CTRL_TEMP
}

//channel = grpc.insecure_channel('localhost:50051')
//stub = test_pb2_grpc.TestServiceStub(channel)